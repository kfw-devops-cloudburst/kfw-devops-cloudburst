# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, and run tests across different versions of node
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        project: [frontend, api]

    defaults:
      run:
        working-directory: ./application/${{ matrix.project }} # Set the default working directory

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ./application/${{ matrix.project }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      #- name: Run linters
      #  uses: wearerequired/lint-action@v2
      #  with:
      #    eslint: true
      #    prettier: true

      - name: Build
        run: npm run build --if-present

      - name: Test
        run: npm test
        
      - name: Audit
        continue-on-error: true
        run: npm audit 
      
      - name: Deploy
        env:
          TF_VAR_azure_client_id: ${{secrets.AZURE_CLIENT_ID}}
          TF_VAR_azure_client_secret: ${{secrets.AZURE_CLIENT_SECRET}}
          TF_VAR_azure_subscription_id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
          TF_VAR_azure_tenant_id: ${{secrets.AZURE_TENANT_ID}}
        run: nmp run deploy --if-present
        
  infrastructure:
    #needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application/ # Set the default working directory
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        run: terraform apply -auto-approve
   
  build:
    needs: infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application/ # Set the default working directory
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - run: echo ${{ secrets.ACR_USERNAME }}
      - run: echo ${{ secrets.ACR_TOKEN }}
      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: cloudburstacr.azurecr.io  # replace with your registry URL
          username: ${{ secrets.ACR_USERNAME }} # replace with the secret name for your DockerHub username
          password: ${{ secrets.ACR_TOKEN }} # replace with the secret name for your DockerHub token
      - name: build and push
        uses: docker/bake-action@v3
        with:
          push: true
          files: docker-compose.yml
          workdir: ./application/
          set: |
             mongo-seed.platform=linux/amd64,linux/arm64
             frontend.platform=linux/amd64,linux/arm64
             api.platform=linux/amd64,linux/arm64
